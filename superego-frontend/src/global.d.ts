declare global {
    interface UISessionState {
        sessionId: string;
        name: string;
        createdAt: string;
        lastUpdatedAt: string;
        // threadIds: string[]; // Replaced by threads object keys
        threads: Record<string, ThreadConfigState>; // Key is frontend-generated threadId (UUID)
        // activeConfigThreadId: string | null; // REMOVED - Now managed by transient activeConfigEditorId store
    }

    /** Represents the configuration state for a single thread/config card in the UI */
    interface ThreadConfigState {
        // threadId (the key in UISessionState.threads) is generated by frontend (UUID)
        name: string; // User-editable name (e.g., "Default", "Strict Rules")
        runConfig: RunConfig; // The specific config for THIS thread
        isEnabled: boolean; // Should new messages be sent to this thread?
    }

    interface ConfiguredConstitutionModule {
        id: string;
        title: string;
        adherence_level: number;
        text?: string;
    }

    interface RunConfig {
        configuredModules: ConfiguredConstitutionModule[];
    }

    interface CheckpointConfigurable {
        thread_id: string | null;
        runConfig: RunConfig;
    }

    interface HistoryEntry {
        checkpoint_id: string;
        thread_id: string;
        values: {
            messages: MessageType[];
        };
        runConfig: RunConfig;
    }

    /** Wrapper object stored in the thread cache */
    interface ThreadCacheData {
        history: HistoryEntry | null;
        isStreaming: boolean;
        error: string | null;
    }

    /** Represents a single constitution available for selection. */
    interface ConstitutionItem {
        id: string;
        title: string;
        description?: string;
    }

    interface BaseApiMessage {
        type: 'human' | 'ai' | 'system' | 'tool';
        content: string | any;
        name?: string;
        tool_call_id?: string;
        additional_kwargs?: Record<string, any>;
        nodeId: string;
    }

    interface HumanApiMessage extends BaseApiMessage {
        type: 'human';
        content: string;
    }

    interface AiApiMessage extends BaseApiMessage {
        type: 'ai';
        content: string | any;
        tool_calls?: Array<{ id: string; name: string; args: string; }>;
        invalid_tool_calls?: any[];
    }

    interface SystemApiMessage extends BaseApiMessage {
        type: 'system';
        content: string;
    }

    interface ToolApiMessage extends BaseApiMessage {
        type: 'tool';
        content: string | any;
        tool_call_id: string;
        name?: string;
        is_error?: boolean;
    }

    /** Represents message types received from the backend API. */
    type MessageType = HumanApiMessage | AiApiMessage | SystemApiMessage | ToolApiMessage;

    /** Represents a constitution stored locally in localStorage */
    interface LocalConstitution {
        id: string;
        title: string;
        text: string;
        createdAt: string;
    }

    /** Input structure for starting a run */
    interface StreamRunInput {
        type: "human";
        content: string;
    }


    // --- Server-Sent Event (SSE) Data Types ---

    /** Structure for text chunks */
    interface SSEChunkData {
        node: string;
        content: string;
    }

    /** Structure for tool call fragments streamed from the AI */
    interface SSEToolCallChunkData {
        node: string;
        id?: string | null;
        name?: string | null;
        args?: string | null;
    }

    /** Structure for completed tool results */
    interface SSEToolResultData {
        node: string;
        tool_name: string;
        content: string;
        is_error: boolean;
        tool_call_id?: string | null;
    }

    /** Structure for error events */
    interface SSEErrorData {
        node: string;
        error: string;
    }

    /** Structure for the final 'end' event payload */
    interface SSEEndData {
        node: string;
        thread_id: string;
        checkpoint_id?: string | null;
    }

    /** Structure for the initial 'run_start' event payload */
    interface SSERunStartData {
        node: string;
        thread_id: string;
        runConfig: RunConfig;
        initialMessages: MessageType[];
    }

    /** Overall structure of data received via SSE */
    interface SSEEventData {
        type: "run_start" | "chunk" | "ai_tool_chunk" | "tool_result" | "error" | "end";
        thread_id?: string | null;
        data: SSERunStartData | SSEChunkData | SSEToolCallChunkData | SSEToolResultData | SSEErrorData | SSEEndData | any;
    }

    // --- Other API Types ---
    /** Request body for submitting a new constitution */
    interface ConstitutionSubmission {
        text: string;
        is_private: boolean;
    }

    /** Response from submitting a new constitution */
    interface SubmissionResponse {
        status: string;
        message: string;
        email_sent: boolean;
    }



}

// Ensures this file is treated as a module. Required for declare global.
export { };
